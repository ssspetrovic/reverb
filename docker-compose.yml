version: '3.8'

services:
  eureka-server:
    build:
      context: ./EurekaService
      dockerfile: Dockerfile
    image: eureka-server:latest
    ports:
      - "8761:8761"
    networks:
      - orchestrator-saga

  gateway-api:
    build:
      context: ./GatewayService
      dockerfile: Dockerfile
    image: gateway-api:latest
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - relational-service
      - elastic-search-service
    ports:
      - "9000:9000"
    networks:
      - orchestrator-saga

  relational-service:
    build:
      context: ./relationaldatabaseservice
      dockerfile: Dockerfile
    image: relational-service:latest
    depends_on:
      - postgresdb
      - eureka-server
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdb:5432/nais
      - SPRING_DATASOURCE_USERNAME=nais
      - SPRING_DATASOURCE_PASSWORD=nais
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "9030:9030"
    networks:
      - orchestrator-saga

  elastic-search-service:
    build:
      context: ./ElasticSearchDatabaseService
      dockerfile: Dockerfile
    image: elastic-spring-example:latest
    restart: on-failure
    depends_on:
      - eureka-server
      - elasticsearch
      - kafka
    environment:
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "9080:9080"
    networks:
      - orchestrator-saga

  postgresdb:
    image: postgres:latest
    environment:
      - POSTGRES_USER=nais
      - POSTGRES_PASSWORD=nais
    volumes:
      - data:/var/lib/postgres
      - ./podaci/spotify_songs.csv:/tmp/spotify_songs.csv
    ports:
      - "5432:5432"
    networks:
      - orchestrator-saga

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "8080:80"
    depends_on:
      - postgresdb
    volumes:
      - ./data:/data
      - ./csv:/var/lib/pgadmin/import
    networks:
      - orchestrator-saga

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    restart: always
    ports:
      - "9200:9200"
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - orchestrator-saga

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "2181:2181"
    networks:
      - orchestrator-saga

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://172.20.0.1:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_LOG_RETENTION_HOURS=168
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
    networks:
      - orchestrator-saga

  redpanda-console:
    container_name: redpanda
    image: docker.redpanda.com/vectorized/console:latest
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    ports:
      - "8081:8080"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]
    depends_on:
      - kafka
    networks:
      - orchestrator-saga

  orchestrator-service:
    build:
      context: './OrchestratorService'
      dockerfile: Dockerfile
    container_name: orchestrator-service
    depends_on:
      - kafka
      - eureka-server
    environment:
      - KAFKA_BROKER=kafka:29092
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    ports:
      - "8082:8082"
    networks:
      - orchestrator-saga

volumes:
  data:
  grafana_storage: {}

networks:
  orchestrator-saga:
    driver: bridge
